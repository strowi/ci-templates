.k3d_up: &k3d_up |
  function echoerr() {
    local header="${2}"

    if [ -n "${header}" ]; then
      printf "\n\033[0;31m** %s **\n\033[0m" "${1}" >&2;
    else
      printf "\033[0;31m%s\n\033[0m" "${1}" >&2;
    fi
  }
  function echoinfo() {
    local header="${2}"

    if [ -n "${header}" ]; then
      printf "\n\033[0;33m** %s **\n\033[0m" "${1}" >&2;
    else
      printf "\033[0;33m%s\n\033[0m" "${1}" >&2;
    fi
  }

  # 1 - app-label
  # 2 - status
  function get_pod() {
    local app_name="${1}"
    local status="${2:-Running}"
    get_pod_cmd="kubectl get pods -n ${KUBE_NAMESPACE} --field-selector=status.phase=${status} -lapp=${app_name} --no-headers -o=custom-columns=NAME:.metadata.name | tail -n 1"
    echoinfo "Waiting till '${app_name}' pod is ready" true
    echoinfo "Running '${get_pod_cmd}'"

    local interval=5
    local elapsed_seconds=0
    local max_seconds=$((2 * 60))
    while true; do
      local pod_name
      pod_name="$(eval "${get_pod_cmd}")"
      [[ "${pod_name}" == "" ]] || break

      if [[ "${elapsed_seconds}" -gt "${max_seconds}" ]]; then
        echoerr "The pod name couldn't be found after ${elapsed_seconds} seconds, aborting."
        break
      fi

      let "elapsed_seconds+=interval"
      sleep ${interval}
    done

    echoinfo "The pod name is '${pod_name}'."
    echo "${pod_name}"
  }

  function ensure_namespace() {
    echoinfo "Ensuring the ${KUBE_NAMESPACE} namespace exists..." true

    kubectl describe namespace "$KUBE_NAMESPACE" || kubectl create namespace "$KUBE_NAMESPACE"

    # create registry secret
    kubectl create secret -n $KUBE_NAMESPACE \
      docker-registry "$CI_REGISTRY" \
      --docker-server="$CI_REGISTRY" \
      --docker-username=gitlab-ci-token \
      --docker-password="$CI_BUILD_TOKEN" \
      --docker-email="$GITLAB_USER_EMAIL" \
      -o yaml --dry-run | kubectl apply -n $KUBE_NAMESPACE -f -
  }

  # start k3s in docker (https://github.com/rancher/k3d)
  # install wget, kubectl, k3d
  # create k3d cluster
  # export kubeconfig
  # lost nodes,deployments,pods
  function start_k3d() {

    echo "# testing if you have set a variable KUBE_CONTEXT"
    echo "# or specified a Gitlab-Environment containing a kubernetes-cluster"

    test -n "${KUBE_CONTEXT}" && echo "# -> yupp, you failed to clear the environment! Quitting..." && exit 1

    test -f /etc/os-release && source /etc/os-release

    case $ID in
      "alpine")
        echo "### detected ${ID}"
        mkdir -p /var/cache/apk;
        test -x curl || apk --update add curl
      ;;
      "ubuntu")
        echo "### detected ${ID}";
        test -x curl || (apt update -qq && apt install wget -yqq)
      ;;
      *);;
    esac

    echo "# dl kubectl"
    test -x kubectl || curl -s "https://storage.googleapis.com/kubernetes-release/release/v1.25.8/bin/linux/amd64/kubectl" -o /usr/bin/kubectl

    echo "# waiting for kubeconfig to be available"
    until curl -s k3s:8081 > /tmp/k3s.yml ; do echo "# waiting for k3d to be ready..." && sleep 3; done
    export KUBECONFIG=/tmp/k3s.yml

    echo "# waiting for coredns to be ready..."
    until kubectl rollout status deployment/coredns -n kube-system ; do echo "# Waiting for coredns..." && sleep 3; done

    echo "# see what i did... 8)"
    kubectl get no,deploy,po --all-namespaces

    echo -e "\n\n# K3d ready ######################"
  }

.k3d:
  stage: test
  image: registry.gitlab.com/strowi/deploy:latest
  services:
    - name: registry.gitlab.com/gitlab-org/cluster-integration/test-utils/k3s-gitlab-ci/releases/$K3S_VERSION
      alias: k3s

  parallel:
    matrix:
      - K3S_VERSION:
        - v1.25.10-k3s1
        # - v1.26.5-k3s1
        # - v1.27.1-k3s1

  variables:
    KUBE_NAMESPACE: $CI_PROJECT_PATH_SLUG

  before_script:
    - *k3d_up
    - start_k3d

